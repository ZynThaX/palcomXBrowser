/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package se.lth.cs.palcom.browsergui;

import ist.palcom.resource.descriptor.AddressFromParamUse;
import ist.palcom.resource.descriptor.CommandInfo;
import ist.palcom.resource.descriptor.ConnectionIdUse;
import ist.palcom.resource.descriptor.ConstantUse;
import ist.palcom.resource.descriptor.Opt;
import ist.palcom.resource.descriptor.ParamUse;
import ist.palcom.resource.descriptor.Use;
import ist.palcom.resource.descriptor.VariableUse;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;

/**
 *
 * @author jon
 */
public class BetterAddInvokeDialog extends javax.swing.JDialog implements ActionListener, ListSelectionListener, TreeSelectionListener {

    protected CommandInfo commandOut;
	private DefaultTreeModel addressingModel;
	private DefaultTreeModel parameterModel;
	private List<String> variableList;
	private final LinkedHashMap<String, Use> useMap = new LinkedHashMap<String, Use>();
	private OutListModel outModel;
	private ParamListModel paramModel;
	private final Opt addressing = new Opt();
	private boolean isInvoke;
	private CommandInfo commandIn;
	/**
     * Creates new form BetterAddInvokeDialog
     * @param command 
	 * @param variableList 
     */
    public BetterAddInvokeDialog(CommandInfo commandOut, CommandInfo commandIn, List<String> variableList, boolean isInvoke) {
    	this.isInvoke = isInvoke;
    	this.commandOut = commandOut;
    	this.commandIn = commandIn;
    	this.variableList = variableList;
        initComponents();
    }

    private DefaultMutableTreeNode initParameterTree() {
    	DefaultMutableTreeNode root = new DefaultMutableTreeNode("Options");
    	DefaultMutableTreeNode variblesNode = new DefaultMutableTreeNode("Variables");
		for (String var : variableList) {
			variblesNode.add(new DefaultMutableTreeNode(new VariableUse(var)));
		}
		
		DefaultMutableTreeNode paramsNode = new DefaultMutableTreeNode("Parameters");
		for (int i = 0; i < commandIn.getNumParamInfo(); ++i) {
			paramsNode.add(new DefaultMutableTreeNode(new ParamUse(commandIn.getParamInfo(i).getID())));
		}
		
		DefaultMutableTreeNode userIdNode = new DefaultMutableTreeNode(new ConnectionIdUse());
		root.add(userIdNode);
		
		DefaultMutableTreeNode constantNode = new DefaultMutableTreeNode(new ConstantUse());
		root.add(constantNode);
		root.add(variblesNode);
		root.add(paramsNode);
		
		return root;
    }
    
    private DefaultMutableTreeNode initAddressingTree() {
    	DefaultMutableTreeNode root = new DefaultMutableTreeNode("Options");
    	DefaultMutableTreeNode variblesNode = new DefaultMutableTreeNode("Variables");
		for (String var : variableList) {
			variblesNode.add(new DefaultMutableTreeNode(new VariableUse(var))); //We need a AddressFromVaiableUse here!
		}
		
		DefaultMutableTreeNode paramsNode = new DefaultMutableTreeNode("Parameters");
		for (int i = 0; i < commandIn.getNumParamInfo(); ++i) {
			paramsNode.add(new DefaultMutableTreeNode(new AddressFromParamUse(commandIn.getParamInfo(i).getID())));
		}
		
		DefaultMutableTreeNode userIdNode = new DefaultMutableTreeNode(new ConnectionIdUse());
		root.add(userIdNode);
		
		DefaultMutableTreeNode constantNode = new DefaultMutableTreeNode(new ConstantUse());
		root.add(constantNode);
		root.add(variblesNode);
		root.add(paramsNode);
		
		return root;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        
		
		addressingModel = new DefaultTreeModel(initAddressingTree());
		parameterModel = new DefaultTreeModel(initParameterTree());

        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        parameterList = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        addressingList = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        addressingTree = new javax.swing.JTree(addressingModel);
        btnAddParam = new javax.swing.JButton();
        btnAddAddressing = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        parameterTree = new javax.swing.JTree(parameterModel);
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        parameterList.addListSelectionListener(this);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE); //this?

        btnOk.setText("Ok");
        btnOk.addActionListener(this);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(this);
        btnCancel.setActionCommand("Cancel");
        
        addressingTree.setCellRenderer(new TreeRenderer());
        parameterTree.setCellRenderer(new TreeRenderer());
        outList.setCellRenderer(new CommandListRenderer());

        outModel = new OutListModel();
        outList.setModel(outModel);
        jScrollPane1.setViewportView(outList);

        paramModel = new ParamListModel();
        parameterList.setModel(paramModel);
        
        parameterList.setCellRenderer(new CommandListRenderer());
        jScrollPane2.setViewportView(parameterList);

        addressingList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "ToAll", "Reply", "UserID"};
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(addressingList);
        addressingList.addListSelectionListener(this);

        jScrollPane4.setViewportView(addressingTree);

        btnAddParam.setText("Set");
        btnAddParam.addActionListener(this);

        btnAddAddressing.setText("Set");
        btnAddAddressing.addActionListener(this);

        jScrollPane5.setViewportView(parameterTree);

        jLabel1.setText("Parameters");

        jLabel2.setText("Addressing");
        
        parameterTree.setEnabled(false);
        addressingTree.setEnabled(false);
        addressingTree.addTreeSelectionListener(this);
		btnAddParam.setEnabled(false);
		if (commandOut.getNumParamInfo() > 0) {
			btnOk.setEnabled(false);
		}
		
		if (!isInvoke) {
			addressingList.setEnabled(false);
		}
		
		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnCancel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnOk))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                            .add(jScrollPane3))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(btnAddParam, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jScrollPane5)
                                    .add(jScrollPane4))
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(btnOk)
                            .add(btnCancel)))
                    .add(layout.createSequentialGroup()
                        .add(1, 1, 1)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(btnAddParam))
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 166, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 158, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 132, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        /*
        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                            .add(jScrollPane3))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(btnAddParam, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(btnAddAddressing, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                            .add(jScrollPane5)))
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane1)
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(btnCancel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnOk))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane1)
                        .add(3, 3, 3)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(btnOk)
                            .add(btnCancel)
                            .add(btnAddAddressing)))
                    .add(layout.createSequentialGroup()
                        .add(1, 1, 1)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(btnAddParam))
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 166, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 158, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 132, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
		*/
        pack();
    }

    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnAddParam;
    private javax.swing.JButton btnAddAddressing;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList outList;
    private javax.swing.JList parameterList;
    private javax.swing.JList addressingList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTree addressingTree;
    private javax.swing.JTree parameterTree;
    
    
    private boolean aborted = false;
    public synchronized boolean showDialog(Component c) {
    	if (c != null) {
    		setLocationRelativeTo(c);
    	}
    	setSize(700,500);
    	setVisible(true);
    	try {
			wait();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
    	setVisible(false);
    	return aborted;
    }
    
	public void actionPerformed(ActionEvent ae) {
		if (ae.getSource() == btnOk) {
			aborted = false;
			synchronized(this) {
				notifyAll();
			}
		} else if (ae.getSource() == btnCancel) {
			aborted = true;
			synchronized(this) {
				notifyAll();
			}
		} else if(ae.getSource() == btnAddParam) {
			String cmd = (String) parameterList.getSelectedValue(); 
			Use u = (Use) ((DefaultMutableTreeNode) parameterTree.getSelectionPath().getLastPathComponent()).getUserObject();
			paramModel.addUse(cmd, u);
			
			if (u instanceof ConstantUse) {
				String cval = JOptionPane.showInputDialog("Enter constant value.");
				((ConstantUse)u).setConstant(cval);
			}
			
//			if (useMap.size() == commandOut.getNumParamInfo()) {
//				btnOk.setEnabled(true);
//			}
			enableOKButton();
		} else if (ae.getSource() == btnAddAddressing) {
			int sel = addressingList.getSelectedIndex();
			if (sel == 2) {
				Use u = (Use) ((DefaultMutableTreeNode) addressingTree.getSelectionPath().getLastPathComponent()).getUserObject(); 
				if (u instanceof ConstantUse) {
					String cval = JOptionPane.showInputDialog("Enter constant value.");
					((ConstantUse)u).setConstant(cval);
				}
				addressing.setChild(u, 0);
			} else {
				addressing.removeAll();
			}
		}
	}
	
	private void enableOKButton() {
//		if (useMap.size() != commandOut.getNumParamInfo()) {
//			return;
//		}
//		if (addressingList.isSelectionEmpty()) {
//			return;
//		}
		btnOk.setEnabled(true);
	}
	
	private class TreeRenderer extends DefaultTreeCellRenderer {
		
		public Component getTreeCellRendererComponent(JTree arg0, Object value,
				boolean arg2, boolean arg3, boolean arg4, int arg5, boolean arg6) {
			
			Object val = value;
			TreeNode tn = (TreeNode) value;
			if(tn instanceof DefaultMutableTreeNode) {
				Object uo = ((DefaultMutableTreeNode)tn).getUserObject();
				if (uo instanceof ConstantUse) {
					val = "Constant";
				} else if (uo instanceof ConnectionIdUse) {
					val = "Connection UserID";
				} else if(uo instanceof Use) {
					Use use = (Use)uo;
					val = use.getName();
				}
			}
			return super.getTreeCellRendererComponent(arg0, val, arg2, arg3, arg4, arg5, arg6);
		}
	}
	
	private class OutListModel extends DefaultListModel {
		
		public synchronized int getSize() { 
			return useMap.size(); 
		}
		
        public synchronized Object getElementAt(int i) {
        	//XXX: This is extremely ugly and inefficient. But we do it very seldom, so what-the-f-ever. 
        	Iterator it = useMap.entrySet().iterator();  
        	for (int ii = 0; ii < i; ii++) {
        		it.next();
        	}
        	return it.next();
        }
        
        public void addUse(String cmd, Use u) { //This should probably not be here...
        	useMap.put(cmd, u);
        	int size = useMap.size() -1;
        	if (size < 0) {
        		size = 0;
        	}
        	fireContentsChanged(this, 0, size);
        }
	}
	
	private class ParamListModel extends DefaultListModel {
		
		public int getSize() { return commandOut.getNumParamInfo(); }
        public Object getElementAt(int i) { return commandOut.getParamInfo(i).getID(); }
        
        public void addUse(String cmd, Use u) { //This should probably not be here...
        	useMap.put(cmd, u);
        	
        	fireContentsChanged(this, 0, commandOut.getNumParamInfo());
        }
	}
	
	private class OutListRenderer extends DefaultListCellRenderer {
		public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
			StringBuilder sb = new StringBuilder();
			if (value instanceof Map.Entry) {
				Map.Entry me = (Entry) value;
				sb.append(me.getKey());
				sb.append(": ");
				
				if (me.getValue() instanceof ConstantUse) {
					sb.append(((ConstantUse)me.getValue()).getConstant());
				} else if(me.getValue() instanceof Use) {
					sb.append(((Use)me.getValue()).getName());
				}
			}
			return super.getListCellRendererComponent(list, sb.toString(), index, isSelected, cellHasFocus);
			
		}
	}
	
	private class CommandListRenderer extends DefaultListCellRenderer {
		public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
			StringBuilder sb = new StringBuilder();
			if (value instanceof String) {
				String cmd = (String) value;
				sb.append(cmd);
				Use u = useMap.get(cmd);
				
				if (u != null) {
					sb.append(": ");
					if (u instanceof ConstantUse) {
						sb.append(((ConstantUse)u).getConstant());
					} else if(u instanceof Use) {
						sb.append(u.getName());
					}
				}
			}
			return super.getListCellRendererComponent(list, sb.toString(), index, isSelected, cellHasFocus);
		}
		
	}

	public void valueChanged(ListSelectionEvent lse) {
		if (lse.getSource() == parameterList) {
			if (parameterList.getSelectedIndex() >= 0) {
				parameterTree.setEnabled(true);
				btnAddParam.setEnabled(true);
			} else {
				parameterTree.setEnabled(false);
				btnAddParam.setEnabled(false);
			}
		} else if (lse.getSource() == addressingList) {
			if (addressingList.getSelectedIndex() == 2) {
				addressingTree.setEnabled(true);
			} else {
				addressingTree.setEnabled(false);
			}
			enableOKButton();
		}
	}

	public HashMap<String, Use> getUseMap() {
		return useMap;
	}

	public Opt getAddressing() {
		return addressing;
	}
	
	public String getAddressingType() {
		return (String) addressingList.getSelectedValue();
	}

	public void valueChanged(TreeSelectionEvent tse) {
		Use u = (Use) ((DefaultMutableTreeNode)tse.getNewLeadSelectionPath().getLastPathComponent()).getUserObject();
		if (u instanceof ConstantUse) {
			String cval = JOptionPane.showInputDialog("Enter constant value.");
			((ConstantUse)u).setConstant(cval);
		}
		addressing.setChild(u, 0);
	}
	
}
